# This config uses micro wake word 2 optionally
# It also allows the user to choose a media_player to play replies on
substitutions:
  name: "voiceassistant"
  friendly_name: VoiceAssistant
  micro_wake_word_model: okay_nabu # hey_jarvis and hey_mycroft are also supported
  timer_sound: https://github.com/esphome/firmware/raw/main/voice-assistant/sounds/timer_finished.wav
  start_sound: /local/voice-assistant/voice-assistant-start.mp3

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
  min_version: 2024.7.1
  project:
    name: "s1rd4v3.voiceassistant"
    version: "1.0.0"
  on_boot:
    priority: 600
    then:
      - if:
          condition:
            lambda: return id(reply_location).state == "On device";
          then:
            - logger.log: "setting speaker to echo_speaker in on_boot"
            - lambda: id(va).set_speaker(echo_speaker);
          else:
            - logger.log: "Using another media player so speaker not set"

esp32:
  board: m5stack-atom
  framework:
    type: esp-idf

logger:

api:
  encryption:
    key: !secret ${name}_api_key

ota:
  - platform: esphome
    id: ota_esphome
  - platform: http_request
    id: ota_http_request

dashboard_import:
  package_import_url: github://s1rd4v3/esphome/voiceassistant.yaml@v1
  import_full_config: false # or true

update:
  - platform: http_request
    id: update_http_request
    name: Firmware
    source: https://firmware.esphome.io/wake-word-voice-assistant/m5stack-atom-echo/manifest.json

http_request:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:

improv_serial:

button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset
  - platform: restart
    id: restart_btn
    name: Restart

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33
    i2s_bclk_pin: GPIO19

microphone:
  - platform: i2s_audio
    id: echo_microphone
    i2s_din_pin: GPIO23
    adc_type: external
    pdm: true

speaker:
  - platform: i2s_audio
    id: echo_speaker
    i2s_dout_pin: GPIO22 
    dac_type: external
    mode: mono
    

voice_assistant:
  id: va
  microphone: echo_microphone
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  vad_threshold: 3
  on_listening:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Slow Pulse"
    - if:
        condition:
          lambda: return id(reply_location).state == "Media Player";
        then:
          - homeassistant.service: 
              service: script.voice_assistant_start
              data:
                entity_id: !lambda |-
                  return id(media_player).state;
                announcement_volume: !lambda |-
                  return id(announcement_volume).state;
  on_stt_vad_end:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Fast Pulse"
  on_tts_start:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 100%
        effect: none
  on_end:
    - delay: 100ms
    - voice_assistant.stop:
    - wait_until:
        not:
          voice_assistant.is_running:
    - wait_until:
        not:
          switch.is_on: timer_ringing
    - if:
        condition:
          lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - micro_wake_word.start:
          - script.execute: reset_led
        else:
          - voice_assistant.start_continuous:
          - script.execute: reset_led
  on_error:
    - light.turn_on:
        id: led
        red: 100%
        green: 0%
        blue: 0%
        brightness: 100%
        effect: none
    - delay: 2s
    - script.execute: reset_led
  on_client_connected:
    - delay: 5s
    - if:
        condition:
          lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - micro_wake_word.start:
        else:
          - voice_assistant.start_continuous:
          - script.execute: reset_led
  on_client_disconnected:
    - voice_assistant.stop:
    - micro_wake_word.stop:
  ## external media play support, on_timer_finished overwritten
  on_timer_finished:
    - voice_assistant.stop:
    - micro_wake_word.stop:
    - switch.turn_on: timer_ringing
    - wait_until:
        not:
          microphone.is_capturing:
    - light.turn_on:
        id: led
        red: 0%
        green: 100%
        blue: 0%
        brightness: 100%
        effect: "Fast Pulse"
    - while:
        condition:
          switch.is_on: timer_ringing
        then:
          - if:
              condition:
                lambda: return id(reply_location).state == "Media Player";
              then:
                - homeassistant.service:
                    service: media_player.play_media
                    data:
                      entity_id: !lambda |-
                        return id(media_player).state;
                      media_content_id: ${timer_sound}
                      media_content_type: music
                      announce: "true"
              else:
                - lambda: id(echo_speaker).play(id(timer_finished_wave_file), sizeof(id(timer_finished_wave_file)));
          - delay: 1s
    - wait_until:
        not:
          speaker.is_playing:
    - light.turn_off: led
    - switch.turn_off: timer_ringing
    - if:
        condition:
          lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - micro_wake_word.start:
          - script.execute: reset_led
        else:
          - voice_assistant.start_continuous:
          - script.execute: reset_led
  on_tts_end:
    - if:
        condition:
          lambda: return id(reply_location).state == "Media Player";
        then:
          - homeassistant.service: 
              service: script.voice_assistant_process_answer
              data:
                entity_id: !lambda |-
                  return id(media_player).state;
                response: !lambda 'return x;'
                announcement_volume: !lambda |-
                  return id(announcement_volume).state;

binary_sensor:
  # button does the following:
  # short click - stop a timer
  # if no timer then restart either microwakeword or voice assistant continuous
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: Button
    disabled_by_default: true
    entity_category: diagnostic
    id: echo_button
    on_double_click:
      - button.press: factory_reset_btn
    on_click:
      - if:
          condition:
            switch.is_on: timer_ringing
          then:
            - switch.turn_off: timer_ringing
          else:
            - if:
                condition: voice_assistant.is_running
                then:
                  - voice_assistant.stop:
                else:
                  - voice_assistant.start_continuous: 

light:
  - platform: esp32_rmt_led_strip
    id: led
    name: None
    disabled_by_default: true
    entity_category: config
    pin: GPIO27
    default_transition_length: 0s
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

script:
  - id: reset_led
    then:
      - if:
          condition:
            - lambda: return id(wake_word_engine_location).state == "On device";
            - switch.is_on: use_listen_light
          then:
            - light.turn_on:
                id: led
                red: 100%
                green: 89%
                blue: 71%
                brightness: 60%
                effect: none
          else:
           - if:
              condition:
                - lambda: return id(wake_word_engine_location).state != "On device";
                - switch.is_on: use_listen_light
              then:
                - light.turn_on:
                    id: led
                    red: 0%
                    green: 100%
                    blue: 100%
                    brightness: 60%
                    effect: none
              else:
               - light.turn_off: led

switch:
  - platform: template
    name: Use listen light
    id: use_listen_light
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - script.execute: reset_led
    on_turn_off:
      - script.execute: reset_led
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: 15min
      - switch.turn_off: timer_ringing

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return x == "In Home Assistant";
          then:
            - micro_wake_word.stop
            - delay: 500ms
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
      - if:
          condition:
            lambda: return x == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop
            - delay: 500ms
            - micro_wake_word.start
  - platform: template
    entity_category: config
    name: Reply Location
    id: reply_location
    optimistic: true
    restore_value: true
    options:
      - Media Player
      - On device
    initial_option: On device
    set_action:
      - logger.log: "set_action called for reply_location"
      - logger.log: "new value set for reply_location, restarting to clear speaker settings"
      - light.turn_on:
          id: led
          red: 100%
          green: 100%
          blue: 0%
          brightness: 100%
          effect: "Fast Pulse"
          # restarting should be the device back into a state where va.speaker: is not set
      - delay: 5s # give time to write settings 
      - button.press: restart_btn

text:
  - platform: template
    name: Media Player Entity ID
    id: media_player
    mode: text
    optimistic: true
    restore_value: true # Save value every 60 seconds
    entity_category: config
    icon: mdi:cast

number:
  - platform: template
    name: Announcement volume
    id: announcement_volume
    step: 1
    min_value: 0
    max_value: 100
    mode: slider
    optimistic: true
    restore_value: true # Save value every 60 seconds
    entity_category: config
    icon: mdi:volume-high

external_components:
  - source: github://pr#5230
    components:
      - esp_adf
    refresh: 0s
  - source: github://jesserockz/esphome-components
    components: [file]
    refresh: 0s

esp_adf:

file:
  - id: timer_finished_wave_file
    file: ${timer_sound}
  - id: voice_assistant_start
    file: ${start_sound}

micro_wake_word:
  on_wake_word_detected:
    - voice_assistant.start: 
        wake_word: !lambda return wake_word; 
  vad:
  models:
    - model: ${micro_wake_word_model}
